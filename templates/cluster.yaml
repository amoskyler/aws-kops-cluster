apiVersion: kops.k8s.io/v1alpha2
kind: Cluster
metadata:
  name: ${cluster_dns}
  labels:
    kops.k8s.io/cluster: ${cluster_dns}
spec:
  kubernetesVersion: ${k8s_version}
  masterPublicName: api.${cluster_dns}
  masterInternalName: api.${cluster_dns}
  networkCIDR: ${vpc_cidr}
  networkID: ${vpc_id}
  awsRegion: ${aws_region}
  dnsZone: ${cluster_zone_id}
  nonMasqueradeCIDR: ${cluster_cidr}
  serviceClusterIPRange: ${service_cluster_ip_cidr}
  kubernetesApiAccess:
%{ for cidr in api_access ~}
  - ${cidr}
%{ endfor ~}
  sshAccess:
%{ for cidr in ssh_access ~}
  - ${cidr}
%{ endfor ~}
%{ if elb_security_group_id != "" ~}
  cloudConfig:
    elbSecurityGroup: ${elb_security_group_id}
%{ endif ~}
  networking:
    calico:
      majorVersion: v3
  api:
    dns: {}
# Note: When there is no ELB the certificate validation fails when using kops kubecfg
# master_ips_for_private_api_dns is not recommended on AWS.
# Use a private load balancer integration and deploy additional tagret groups or load balancers for public facing behaviour
%{ if lb_create ~}
    loadBalancer:
      type: ${lb_type}
      crossZoneLoadBalancing: true
      sslCertificate: ${certificate_arn}
      additionalSecurityGroups: [${lb_security_groups}]
%{ endif ~}
  kubeAPIServer:
    targetRamMb: 2560
    eventTTL: 12h0m0s
    # Kops generates a kubecfg with http basic credentials
    disableBasicAuth: false
    maxRequestsInflight: ${max_requests_in_flight}
    maxMutatingRequestsInflight: ${max_mutating_requests_in_flight}
    serviceNodePortRange: 15000-65500
  kubelet:
    anonymousAuth: false
    kubeReserved:
      cpu: 150m
      memory: 224Mi
      ephemeral-storage: 1Gi
    systemReserved:
      cpu: 50m
      memory: 112Mi
      ephemeral-storage: 1Gi
    kubeReservedCgroup: "/kube-reserved"
    systemReservedCgroup: "/system-reserved"
    enforceNodeAllocatable: "pods,system-reserved,kube-reserved"
  docker:
    logDriver: json-file
    logOpt:
    - max-size=24m
    - max-file=10
  externalDns:
    watchIngress: true
  kubeProxy:
    clusterCIDR: ${cluster_cidr}
  kubeControllerManager:
    horizontalPodAutoscalerSyncPeriod: 30s
    horizontalPodAutoscalerDownscaleDelay: 5m0s
    horizontalPodAutoscalerUpscaleDelay: 3m0s
    horizontalPodAutoscalerTolerance: 0.1
    clusterCIDR: ${cluster_cidr}
  authorization:
    rbac: {}
  iam:
    allowContainerRegistry: true
    legacy: false
  channel: stable
  cloudLabels:
    Cluster: ${cluster_name}
    Namespace: ${namespace}
    Stage: ${stage}
    Region: ${region}
    kops.k8s.io/cluster: ${cluster_dns}
  cloudProvider: aws
  configBase: s3://${kops_bucket_name}/${cluster_dns}
  etcdClusters:
  - etcdMembers:
%{ for index, member in etcd_members ~}
    - encryptedVolume: true
      instanceGroup: ${member}
      name: master-${index}
      volumeType: ${etcd_main_volume_type}
      volumeSize: ${etcd_main_volume_size}
%{ if etcd_main_volume_iops != 0 ~}
      volumeIops: ${etcd_main_volume_iops}
%{ endif ~}
%{ endfor ~}
    name: main
    version: 3.3.13
    enableEtcdTLS: true
  - etcdMembers:
%{ for index, member in etcd_members ~}
    - encryptedVolume: true
      instanceGroup: ${member}
      name: master-${index}
      volumeType: ${etcd_event_volume_type}
      volumeSize: ${etcd_event_volume_size}
%{ if etcd_main_volume_iops != 0 ~}
      volumeIops: ${etcd_event_volume_iops}
%{ endif ~}
%{ endfor ~}
    name: events
    version: 3.3.13
    cpuRequest: 300m
    memoryRequest: 768Mi
    enableEtcdTLS: true
  subnets:
%{ for index, id in public_subnet_ids ~}
  - id: ${id}
    cidr: ${element(public_subnet_cidrs, index)}
    name: utility-${element(aws_zones, index)}
    type: Utility
    zone: ${element(aws_zones, index)}
%{ endfor ~}
%{ for index, id in private_subnet_ids ~}
  - id: ${id}
    cidr: ${element(private_subnet_cidrs, index)}
    name: private-${element(aws_zones, index)}
    type: Private
    zone: ${element(aws_zones, index)}
%{ endfor ~}
  topology:
    dns:
      type: ${dns_type}
    masters: private
    nodes: private
    bastion:
      idleTimeoutSeconds: 900
%{ if bastion_public_name != "" ~}
      bastionPublicName: ${bastion_public_name}.${cluster_dns}
%{ endif ~}
