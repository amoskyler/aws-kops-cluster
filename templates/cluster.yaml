apiVersion: kops/v1alpha2
kind: Cluster
metadata:
  name: ${cluster_name}
  labels:
    kops.k8s.io/cluster: ${cluster_name}
spec:
  kubernetesVersion: 1.13.10
  masterPublicName: api.${cluster_dns}
  networkCIDR: ${vpc_cidr}
  networkID: ${vpc_id}
  awsRegion: ${aws_region}
  dnsZone: ${cluster_zone_id}
  nonMasqueradeCIDR: ${cluster_cidr}
  kubernetesApiAccess:
  - ${vpc_cidr}
  sshAccess:
  - ${vpc_cidr}
  networking:
    calico: {}
  %{ if create_api_lb }
  api:
    dns: {}
    loadBalancer:
      type: Internal
      sslCertificate: ${certificate_arn}
      additionalSecurityGroups: [${lb_security_groups}]
      crossZoneLoadBalancing: true
  %{ endif }
  kubeAPIServer:
    targetRamMb: 2048
    disableBasicAuth: true
    maxRequestsInflight: ${max_requests_in_flight}
    maxMutatingRequestsInflight: ${max_mutating_requests_in_flight}
    serviceNodePortRange: 10000-35000
  kubelet:
    anonymousAuth: false
    kubeReserved:
      cpu: 200m
      memory: 256Mi
      ephemeral-storage: 1Gi
    systemReserved:
      cpu: 50m
      memory: 112Mi
      ephemeral-storage: 1Gi
    kubeReservedCgroup: "/kube-reserved"
    systemReservedCgroup: "/system-reserved"
    enforceNodeAllocatable: "pods,system-reserved,kube-reserved"
  docker:
    registryMirrors:
    - registry.hub.docker.com
    logDriver: json-file
    logOpt:
    - max-size=24m
    - max-file=10
  externalDns:
    watchIngress: true
  kubeProxy:
    clusterCIDR: ${cluster_cidr}
  kubeControllerManager:
    horizontalPodAutoscalerSyncPeriod: 30s
    horizontalPodAutoscalerDownscaleDelay: 5m0s
    horizontalPodAutoscalerUpscaleDelay: 3m0s
    horizontalPodAutoscalerTolerance: 0.1
    clusterCIDR: ${cluster_cidr}
  authentication:
    aws: {}
  authorization:
    rbac: {}
  iam:
    allowContainerRegistry: true
    legacy: false
  channel: stable
  cloudLabels:
    Cluster: ${cluster_name}
    Namespace: ${namespace}
    Stage: ${stage}
    Region: ${region}
    kops.k8s.io/cluster: ${cluster_name}
  cloudProvider: aws
  configBase: s3://${kops_bucket_name}/${cluster_name}
  etcdClusters:
  - etcdMembers:
  %{ for index, member in etcd_members ~}
    - encryptedVolume: true
      instanceGroup: ${member}
      name: master-${index}
      volumeType: gp2
      volumeSize: 96
  %{ endfor ~}
    name: main
    version: 3.3.13
    enableEtcdTLS: true
  - etcdMembers:
  %{ for index, member in etcd_members ~}
    - encryptedVolume: true
      instanceGroup: ${member}
      name: master-${index}
      volumeType: io1
      volumeIops: 180
      volumeSize: 56
  %{ endfor ~}
    name: events
    version: 3.3.13
    cpuRequest: 300m
    memoryRequest: 768Mi
    enableEtcdTLS: true
  subnets:
  - id: ${public_subnet_id_a}
    cidr: ${public_subnet_cidr_a}
    name: utility-${aws_region}a
    type: Utility
    zone: ${aws_region}a
  - id: ${public_subnet_id_b}
    cidr: ${public_subnet_cidr_b}
    name: utility-${aws_region}b
    type: Utility
    zone: ${aws_region}b
  - id: ${public_subnet_id_c}
    cidr: ${public_subnet_cidr_c}
    name: utility-${aws_region}c
    type: Utility
    zone: ${aws_region}c
  - id: ${private_subnet_id_a}
    cidr: ${private_subnet_cidr_a}
    name: private-${aws_region}a
    type: Private
    zone: ${aws_region}a
  - id: ${private_subnet_id_b}
    cidr: ${private_subnet_cidr_b}
    name: private-${aws_region}b
    type: Private
    zone: ${aws_region}b
  - id: ${private_subnet_id_c}
    cidr: ${private_subnet_cidr_c}
    name: private-${aws_region}c
    type: Private
    zone: ${aws_region}c
  topology:
    dns:
      type: ${dns_type}
    masters: private
    nodes: private
    bastion:
      bastionPublicName: bastion.${cluster_dns}
